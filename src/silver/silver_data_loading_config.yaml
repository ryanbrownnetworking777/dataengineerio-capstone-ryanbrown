# Common anchors here
delta_lake_path: &delta_lake_path "output_data_lake" 
db_path: &db_path ERPSourceMockup.db
# Multiline anchor of executable python code run before a called out function executes. Can be overridden in the actual definition. 
pre_execution_python_code: &pre_execution_python_code | 
  print(results.head(1))
  function_to_execute_arguments["df"] = results
  print(function_to_execute_arguments.keys())
# Array of etl jobs that will be run, each job has an arbitrary number of steps. Valid and invalid examples included. 
etl_jobs: 
  - 
    - step_description: Reading Location Bronze Delta Table 
      function_to_execute: read_from_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: LOCATION
        layer: bronze
    - step_description: Performing silver transformations to create StagedLocation
      function_to_execute: transform_polars_df_with_duckdb
      function_to_execute_arguments:
        query_path: 
          - src
          - silver
          - sql_files
          - SilverLocationTransformation.sql
    - step_description: Writing StagedLocation to Silver local delta
      function_to_execute: write_to_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: StagedLocation
        layer: silver
      pre_execution_python_code: *pre_execution_python_code
  - 
    - step_description: Reading Accounts Bronze Delta Table 
      function_to_execute: read_from_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: ACCOUNTS
        layer: bronze
    - step_description: Performing silver transformations to create StagedAccounts
      function_to_execute: transform_polars_df_with_duckdb
      function_to_execute_arguments:
        query_path: 
          - src
          - silver
          - sql_files
          - SilverAccountsTransformation.sql
    - step_description: Writing StagedAccounts to Silver local delta
      function_to_execute: write_to_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: StagedAccounts
        layer: silver
      pre_execution_python_code: *pre_execution_python_code
  - 
    - step_description: Reading InventoryItemLocations Bronze Delta Table 
      function_to_execute: read_from_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: INVENTORYITEMLOCATIONS
        layer: bronze
    - step_description: Performing silver transformations to create StagedInventoryItemLocations
      function_to_execute: transform_polars_df_with_duckdb
      function_to_execute_arguments:
        query_path: 
          - src
          - silver
          - sql_files
          - SilverInventoryItemLocationsTransformation.sql
    - step_description: Writing StagedInventoryItemLocations to Silver local delta
      function_to_execute: write_to_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: StagedInventoryItemLocations
        layer: silver
      pre_execution_python_code: *pre_execution_python_code
  - 
    - step_description: Reading InventoryItems Bronze Delta Table 
      function_to_execute: read_from_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: INVENTORYITEMS
        layer: bronze
    - step_description: Performing silver transformations to create StagedInventoryItems
      function_to_execute: transform_polars_df_with_duckdb
      function_to_execute_arguments:
        query_path: 
          - src
          - silver
          - sql_files
          - SilverInventoryItemsTransformation.sql
    - step_description: Writing StagedInventoryItems to Silver local delta
      function_to_execute: write_to_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: StagedInventoryItems
        layer: silver
      pre_execution_python_code: *pre_execution_python_code
  - 
    - step_description: Reading PurchaseOrder Bronze Delta Table 
      function_to_execute: read_from_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: PURCHASEORDER
        layer: bronze
    - step_description: Performing silver transformations to create StagedPurchaseOrder
      function_to_execute: transform_polars_df_with_duckdb
      function_to_execute_arguments:
        query_path: 
          - src
          - silver
          - sql_files
          - SilverPurchaseOrderTransformation.sql
    - step_description: Writing StagedPurchaseOrder to Silver local delta
      function_to_execute: write_to_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: StagedPurchaseOrder
        layer: silver
      pre_execution_python_code: *pre_execution_python_code
  - 
    - step_description: Reading SalesOrder Bronze Delta Table 
      function_to_execute: read_from_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: SALESORDER
        layer: bronze
    - step_description: Performing silver transformations to create StagedSalesOrder
      function_to_execute: transform_polars_df_with_duckdb
      function_to_execute_arguments:
        query_path: 
          - src
          - silver
          - sql_files
          - SilverSalesOrderTransformation.sql
    - step_description: Writing StagedSalesOrder to Silver local delta
      function_to_execute: write_to_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: StagedSalesOrder
        layer: silver
      pre_execution_python_code: *pre_execution_python_code
  - 
    - step_description: Reading WorkOrder Bronze Delta Table 
      function_to_execute: read_from_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: WORKORDER
        layer: bronze
    - step_description: Performing silver transformations to create StagedWorkOrder
      function_to_execute: transform_polars_df_with_duckdb
      function_to_execute_arguments:
        query_path: 
          - src
          - silver
          - sql_files
          - SilverWorkOrderTransformation.sql
    - step_description: Writing StagedWorkOrder to Silver local delta
      function_to_execute: write_to_local_delta
      function_to_execute_arguments:
        delta_lake_path: *delta_lake_path 
        table_name: StagedWorkOrder
        layer: silver
      pre_execution_python_code: *pre_execution_python_code
